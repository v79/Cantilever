openapi: 3.0.3
info:
  title: Cantilever API
  description: API for Cantilever, providing methods for managing the content of a static website
  version: 0.0.11
servers:
  - url: https://api.cantilevers.org
tags:
  - name: Pages
    description: Create, update and manage static pages
  - name: Project
    description: Manage the overall project settings
  - name: Posts
    description: Create, update and manage blog posts
  - name: Templates
    description: Create, update and manage templates
  - name: Media
    description: Create, update and manage images and other media files
  - name: Generation
    description: Trigger the regeneration of pages and blog posts
  - name: Metadata
    description: Manage the metadata database for the project
paths:
  /warm:
    get:
      summary: Warm
      description: Warms the lambda router
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /pages:
    get:
      summary: Get pages
      description: Returns a list of all pages
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
  /pages/save:
    post:
      tags:
        - Pages
      summary: Save page
      description: Save markdown page source
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: org.liamjd.cantilever.models.ContentNode$PageNode
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /pages/{srcKey}:
    get:
      tags:
        - Pages
      summary: Get page source
      description: Returns the markdown source for a page
      parameters:
        - name: srcKey
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
    delete:
      tags:
        - Pages
      summary: Delete page
      description: Delete a static page
      parameters:
        - name: srcKey
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /pages/folder/new/{folderName}:
    put:
      tags:
        - Pages
      summary: Create folder
      description: Pages can be nested in folders, but don't go too deep!
      parameters:
        - name: folderName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /pages/folder/{srcKey}:
    delete:
      tags:
        - Pages
      summary: Delete folder
      description: Delete a folder. It must be empty
      parameters:
        - name: srcKey
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /pages/reassignIndex:
    post:
      tags:
        - Pages
      summary: Reassign index page for folder
      description: Set a new index page for the folder, so that it becomes index.html for that folder, and unset the previous index page
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org.liamjd.cantilever.models.rest.ReassignIndexRequestDTO'
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /folders:
    get:
      summary: Get folders
      description: Returns a list of all folders
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
  /project/:
    get:
      tags:
        - Project
      summary: Get project definition
      description: Returns the cantilever.yaml definition file
      security:
        - cognitojwt-bearer-token-authorizer: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
    put:
      tags:
        - Project
      summary: Update project definition
      description: Supply an updated cantilever.yaml definition file
      security:
        - cognitojwt-bearer-token-authorizer: []
      requestBody:
        content:
          application/yaml:
            schema:
              $ref: '#/components/schemas/org.liamjd.cantilever.models.CantileverProject'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
  /project/templates/{templateKey}:
    get:
      tags:
        - Project
      summary: Get template metadata
      description: Returns the metadata for a template
      security:
        - cognitojwt-bearer-token-authorizer: []
      parameters:
        - name: templateKey
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
  /posts:
    get:
      summary: Get posts
      description: Returns a list of all posts
      security:
        - cognitojwt-bearer-token-authorizer: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
  /posts/{srcKey}:
    get:
      tags:
        - Posts
      summary: Get post source
      description: Returns the markdown source for a post
      security:
        - cognitojwt-bearer-token-authorizer: []
      parameters:
        - name: srcKey
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
    delete:
      tags:
        - Posts
      summary: Delete post
      description: Delete a blog post
      security:
        - cognitojwt-bearer-token-authorizer: []
      parameters:
        - name: srcKey
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /posts/preview/{srcKey}:
    get:
      tags:
        - Posts
      summary: Preview post
      description: When implemented, this will return a preview of a post
      security:
        - cognitojwt-bearer-token-authorizer: []
      parameters:
        - name: srcKey
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            text/html:
              schema:
                type: string
  /posts/save:
    post:
      tags:
        - Posts
      summary: Save post
      description: Save markdown post source
      security:
        - cognitojwt-bearer-token-authorizer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org.liamjd.cantilever.models.rest.PostNodeRestDTO'
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /templates:
    get:
      summary: Get templates
      description: Returns a list of all templates
      security:
        - cognitojwt-bearer-token-authorizer: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
  /templates/{srcKey}:
    get:
      tags:
        - Templates
      summary: Get template source
      description: Returns the handlebars source for a template
      security:
        - cognitojwt-bearer-token-authorizer: []
      parameters:
        - name: srcKey
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
  /templates/save:
    post:
      tags:
        - Templates
      summary: Save template
      description: Save handlebars template source
      security:
        - cognitojwt-bearer-token-authorizer: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: org.liamjd.cantilever.models.ContentNode$TemplateNode
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /templates/usage/{srcKey}:
    get:
      tags:
        - Templates
      summary: Get template usage
      description: Returns the count of pages and posts which use this template
      security:
        - cognitojwt-bearer-token-authorizer: []
      parameters:
        - name: srcKey
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
  /media/images:
    get:
      tags:
        - Media
      summary: Get images
      description: Returns a list of all images
      security:
        - cognitojwt-bearer-token-authorizer: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
  /media/images/{srcKey}/{resolution}:
    get:
      tags:
        - Media
      summary: Get image
      description: Returns an image with the given key and image resolution
      security:
        - cognitojwt-bearer-token-authorizer: []
      parameters:
        - name: srcKey
          in: path
          required: true
          schema:
            type: string
        - name: resolution
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
  /media/images/:
    post:
      tags:
        - Media
      summary: Upload image
      description: Upload an image to the source bucket
      security:
        - cognitojwt-bearer-token-authorizer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org.liamjd.cantilever.models.ImageDTO'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
  /media/images/{srcKey}:
    delete:
      tags:
        - Media
      summary: Delete image
      description: Delete an image from the source bucket
      security:
        - cognitojwt-bearer-token-authorizer: []
      parameters:
        - name: srcKey
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /generate/post/{srcKey}:
    put:
      tags:
        - Generation
      summary: Regenerate a post
      description: Trigger the regeneration of a post
      security:
        - cognitojwt-bearer-token-authorizer: []
      parameters:
        - name: srcKey
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /generate/page/{srcKey}:
    put:
      tags:
        - Generation
      summary: Regenerate a page
      description: Trigger the regeneration of a page
      security:
        - cognitojwt-bearer-token-authorizer: []
      parameters:
        - name: srcKey
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /generate/images/resolutions:
    put:
      tags:
        - Generation
      summary: Regenerate images
      description: Trigger the regeneration of all images at all resolutions - NOT IMPLEMENTED
      security:
        - cognitojwt-bearer-token-authorizer: []
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /generate/template/{templateKey}:
    put:
      tags:
        - Generation
      summary: Regenerate content based on a template
      description: Regenerate all the pages or posts that use this template
      security:
        - cognitojwt-bearer-token-authorizer: []
      parameters:
        - name: templateKey
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /metadata/rebuild:
    put:
      tags:
        - Metadata
      summary: Rebuild metadata
      description: Rebuild the metadata database from the source pages, posts, templates and images
      security:
        - cognitojwt-bearer-token-authorizer: []
      requestBody:
        content:
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
  /openAPI:
    get:
      summary: OpenAPI
      description: Returns the OpenAPI specification for this API
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /showAllRoutes:
    get:
      summary: Show all routes
      description: Returns a list of all routes in the API, a rather clumsy text list.
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
components:
  securitySchemes:
    cognitojwt-bearer-token-authorizer:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    org.liamjd.cantilever.models.CantileverProject:
      type: object
      properties:
        projectName:
          type: string
        author:
          type: string
        dateFormat:
          type: string
        dateTimeFormat:
          type: string
        imageResolutions:
          type: object
          description: object(Map<String, ImgRes>)
        attributes:
          type: object
          description: object(Map<String, String>?)
    org.liamjd.cantilever.models.ImageDTO:
      type: object
      properties:
        srcKey:
          type: string
        contentType:
          type: string
        bytes:
          type: string
    org.liamjd.cantilever.models.TemplateList:
      type: object
      properties:
        count:
          type: number
        lastUpdated:
          type: object
          description: object(Instant)
        templates:
          type: object
          description: object(List<Template>)
    org.liamjd.cantilever.models.Template:
      type: object
      properties:
        srcKey:
          type: string
        lastUpdated:
          type: object
          description: object(Instant)
        metadata:
          type: object
          description: object(TemplateMetadata)
    org.liamjd.cantilever.models.TemplateMetadata:
      type: object
      properties:
        name:
          type: string
        sections:
          type: object
          description: object(List<String>?)
    org.liamjd.cantilever.models.rest.FolderListDTO:
      type: object
      properties:
        count:
          type: number
        folders:
          type: object
          description: object(List<FolderNode>)
    org.liamjd.cantilever.models.rest.HandlebarsTemplate:
      type: object
      properties:
        template:
          type: object
          description: object(Template)
        body:
          type: string
    org.liamjd.cantilever.models.rest.ImageListDTO:
      type: object
      properties:
        count:
          type: number
        lastUpdated:
          type: object
          description: object(Instant)
        images:
          type: object
          description: object(List<ImageNode>)
    org.liamjd.cantilever.models.rest.MarkdownPageDTO:
      type: object
      properties:
        metadata:
          type: object
          description: object(PageNode)
        body:
          type: string
        type:
          type: object
          description: object(String?)
    org.liamjd.cantilever.models.rest.PageListDTO:
      type: object
      properties:
        count:
          type: number
        lastUpdated:
          type: object
          description: object(Instant)
        pages:
          type: object
          description: object(List<PageNode>)
    org.liamjd.cantilever.models.rest.PostListDTO:
      type: object
      properties:
        count:
          type: number
        lastUpdated:
          type: object
          description: object(Instant)
        posts:
          type: object
          description: object(List<PostNode>)
    org.liamjd.cantilever.models.rest.PostNodeRestDTO:
      type: object
      properties:
        srcKey:
          type: string
        title:
          type: string
        templateKey:
          type: string
        date:
          type: object
          description: object(LocalDate)
        slug:
          type: string
        body:
          type: string
        attributes:
          type: object
          description: object(Map<String, String>)
    org.liamjd.cantilever.models.rest.ReassignIndexRequestDTO:
      type: object
      properties:
        from:
          type: string
        to:
          type: string
        folder:
          type: string
    org.liamjd.cantilever.models.rest.TemplateListDTO:
      type: object
      properties:
        count:
          type: number
        lastUpdated:
          type: object
          description: object(Instant)
        templates:
          type: object
          description: object(List<TemplateNode>)
    org.liamjd.cantilever.models.rest.TemplateUseDTO:
      type: object
      properties:
        count:
          type: number
        pageKeys:
          type: object
          description: object(List<String>)
        postKeys:
          type: object
          description: object(List<String>)
